# TODO：以下配置实际并未生效，读取的还是使用该包下的配置文件，如何解决后面考虑实现
spring:
  quartz:
    scan: true
    jdbc:
      # 初始化Quartz表结构,项目第一次启动配置程always,然后改成never 否则已生成的job会被初始化掉
      initialize-schema: never
    #设置quartz任务的数据持久化方式，默认是内存方式
    job-store-type: jdbc
    properties:
      org:
        quartz:
          scheduler:
            #可以为任意字符串，对于scheduler来说此值没有意义，但是可以区分同一系统中多个不同的实例，
            #如果使用了集群的功能，就必须对每一个实例使用相同的名称，这样使这些实例“逻辑上”是同一个scheduler。
            instanceName: MyScheduler
            #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的
            instanceId: AUTO
          jobStore:
            #持久化配置
            #application自己管理事务
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            #类似于Hibernate的dialect，用于处理DB之间的差异，StdJDBCDelegate能满足大部分的DB
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中
            #以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            useProperties: true
            #数据库表前缀
            tablePrefix: qrtz_
            #最大能忍受的触发超时时间，如果超时则认为“失误”（以毫秒为单位）
            misfireThreshold: 60000
            #是否是应用在集群中，当应用在集群中时必须设置为TRUE，否则会出错。
            #如果有多个Quartz实例在用同一套数据库时，必须设置为true。
            isClustered: true
            #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            clusterCheckinInterval: 5000
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 30
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true


