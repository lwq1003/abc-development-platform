server:
  port: 8080
#数据连接
spring:
  datasource:
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/abc?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowMultiQueries=true
    username: root
    password: root
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 600000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1
      testWhileIdle: false
      testOnBorrow: true
      testOnReturn: false
      usePingMethod: false
  devtools:
    livereload:
      enabled: true
  redis:
    host: localhost
    port: 6379
    password:
    #新版本redis的timeout是一个duration，需使用如下写法
    timeout: 10s
    database: 0
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 2
        # 连接池中的最大空闲连接
        max-idle: 2
        # 连接池的最大连接数
        max-active: 16
        #连接池最大阻塞等待时间
        max-wait: 30s
  profiles:
    active: dev
  #  session:
  #    store-type: REDIS
  #    timeout: 8h
  servlet:
    # 文件上传设置
    multipart:
      #设置单个文件的大小,-1代表不限制
      max-file-size: -1
      #设置单次请求文件的大小,-1代表不限制
      max-request-size: -1

  freemarker:
    #    不检测是否存在模板，避免启动时控制台输出警告信息
    checkTemplateLocation: false
  quartz:
    scan: true
    jdbc:
      # 初始化Quartz表结构,项目第一次启动配置程always,然后改成never 否则已生成的job会被初始化掉
      initialize-schema: never
    #设置quartz任务的数据持久化方式，默认是内存方式
    job-store-type: jdbc
    properties:
      org:
        quartz:
          scheduler:
            #可以为任意字符串，对于scheduler来说此值没有意义，但是可以区分同一系统中多个不同的实例，
            #如果使用了集群的功能，就必须对每一个实例使用相同的名称，这样使这些实例“逻辑上”是同一个scheduler。
            instanceName: MyScheduler
            #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的
            instanceId: AUTO
          jobStore:
            #持久化配置
            #application自己管理事务
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            #类似于Hibernate的dialect，用于处理DB之间的差异，StdJDBCDelegate能满足大部分的DB
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中
            #以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            useProperties: true
            #数据库表前缀
            tablePrefix: qrtz_
            #最大能忍受的触发超时时间，如果超时则认为“失误”（以毫秒为单位）
            misfireThreshold: 60000
            #是否是应用在集群中，当应用在集群中时必须设置为TRUE，否则会出错。
            #如果有多个Quartz实例在用同一套数据库时，必须设置为true。
            isClustered: true
            #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            clusterCheckinInterval: 5000
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 30
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true


#mybatis-plus配置
mybatis-plus:
  #  mapper-locations: classpath*:/system/**.xml
  global-config:
    db-config:
      logic-delete-value: "YES" # 逻辑已删除值
      logic-not-delete-value: "NO" # 逻辑未删除值
#平台配置
platform-config:
  system:
    enablePermission: false
    userInitPassword: 12345678
    tokenSecret: wqliu
    exportDataPageSize: 2
  message:
    serverPort: 8997
    messageServerAppCode: CIP
    readIdleTimeOut: 60
    maxSendCount: 10
    sendMessageSpan: 30
    sendMessageCount: 10
    enableResend: true
  oss:
    storeClass: tech.abc.platform.oss.service.impl.LocalStoreServiceImpl
    basePath: c:/attachment/





